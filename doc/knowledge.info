自身知识结构梳理,找工作准备.

*) 什么是数据?
    --> 符号集,词集合,段落及其他

*) 什么是信息?
    --> 数据所附带的语义

*) 什么是信息技术?
    --> 数据的(存储,传输,处理)的具体解决方案

讨论范围: 信息技术领域

*) 什么是工程师?
    --> 信息技术相关问题的实际处理人员

*) 基本方法论是什么? 
    1. 通过工具解决实际问题
    2. 依据经典理论体系构建和维护工具
    3. 通过解决实际问题和发展工具促进理论体系演进
    4. 通过1,2,3循环发现和界定新和实际问题

*) 什么是工具?
    --> 实现信息技术具体操作流程的"等价合并和批量执行"的"系统和功能"集合

*) 什么是功能?
    --> 完成特定信息含义的数据处理过程,包含三个步骤(输入,数据处理,输出)

*) 什么是系统?
    --> 特定上下文下,数据存储,传输,处理过程的结构化功能集合

*) 什么是结构化功能集合?
    --> 处理过程间是存在相互协作,包括如下方面:
            1. 存在过程间执行顺序,执行依赖上的调度控制(比如某种粒度上的中断处理)
            2. 存在过程间的同步控制和IPC(消息,管道,共享存储)
            3. 存在功能分层和自上而下的调用链

*) 什么是上下文?
    --> 支撑目标系统实现的已有系统,相对于"目标"系统为"底层"系统

*) 什么是等价合并?
    --> 保证输入输出一致前提下的功能合并

-------------------------------------------
操作系统:
*) 硬件体系结构:
    CPU: 指令集,频率,中断,时钟;
         寄存器,缓存;
         流水线;
    BUS: 控制总线,传输总线,总线带宽,南桥,北桥
    MEM: 寻址,DMA
    HDD: RAID,带宽计算 

*) 操作系统(软件):
    硬件管理:
        硬件中断管理: (IDT,EPOLL,NIO,REACTOR) --> 相同的基于时间响应的模式一直在各个层面迭代,驱动服务运行
            1. 中断初始化:
                中断号注册 
                -->IDT,IDTR,GDTR,GDT,selector,IRQ-handler

            2. 中断处理:
                HARDWARE 中断信号发出
                    --> BUS
                    --> CPU Pin
                    --> CPU (
                             --> PIC gen vactor i (中断号)
                             --> internal bus
                             --> ACK PIC
                             --> auto invoke (
                                              --> vector i (中断号查询) IDT,IDTR,GDTR,GDT
                                              --> selector
                                              --> IRQ-handler
                                             )
                            )

            硬件中断事件响应: 
                颗粒度: 每个指令执行完都会检查中断阵脚电平(指令粒度抢占,主频2.5GHz粗略表示执行上限是1秒25亿条指令)
                1. 随机硬件IO事件触发发(interrupt context):
                    top half: 涉及中断向量表
                    1. 硬中断:
                    2. interrupt context

                2. 周期时钟Tick触发(process context): TODO 应存在一个特定routine做统一路由,需确认具体逻辑 
                    颗粒度: 每个时钟中断周期都会因时钟中断而被触发(时钟周期粒度抢占)
                    bottom half: 操作系统通过指令控制
                    1. 软中断:
                    2. 异常:
                    3. TRAP: "user_mod/sys_mod" 转换
                    4. (softirq,tasklet,work queues)

                TIP: 1. 中断管理即不属于user_mod也不属于sys_mod,而是控制着几种上下文的切换，属于更底层的机制
                     2. 中断切换安全的基础是，所有相关的上下文信息均以数据的形式进行了描述，并在主存进行了持久保存. 
                     3. 中断的切换实际上是主存中所要处理的数据的切换.

        驱动管理: modprobe,lsmod,mismanger,demsg 
        设备管理: /dev/*
        interactive/non-interactive:

    进程系统:
        生命周期:
            进程创建: fork(),exec()
            进程调度(状态迁移):
            进程销毁: exit(),waitpid()
        进程表:
        内存分配: ld,ldd,ELF文件结构,栈空间结构
        IPC: signo,pipe,shm
        系统调用: (kernel stack)sys_mod进程同user_mod进程无关,堆栈的创建位置也不一样.
                  (kernel stack)sys_mod进程用于:
                    1. 系统调用处理(每个系统调用应带有user_mod的进程PID)
                    2. 驱动相关bootom half的处理
                    3. sys_mod下deamon服务

    内存系统:
        vitrual memory:
    文件系统:
    网络系统:
    用户权限:

-------------------------------------------
分布式系统:
*) 可靠通信:
    1. 静默失败
    2. 有限次ACK确认协议(两将军问题)
    3. 防篡改(拜占庭容错)

*) 状态同步:
    1. 逻辑时钟
    2. 分布式锁
    3. 选主协议

*) IPC:
    1. 消息队列
    2. 数据流
    3. 共享存储

*) 一致性:
    1. 顺序一致性
    2. 会话一致性
    TODO. 待补充

-------------------
*) 分布式存储:
    1. 数据分布方式: 分片(sharding),副本(replica)
    2. 数据同步方式: 星形同步(binlong),链式同步(hdfs)
    3. 系统形态分类:
        1. 数据库(结构化数据):
            1. 分布式KV
            2. 分布式关系型数据库
            3. 数据仓库
        2. 搜索引擎(半结构化数据:索引属性+文档关键字倒排)
        3. 分布式文件系统(非结构化数据):
            1. 小文件服务
            2. 存储服务
            3. 块存储服务

-------------------
*) 分布式计算:
    1. 任务调度:
    2. 资源管理:
    3. 节点管理:

-------------------
*) 系统稳定性(HA):
    1. 主从方案:
        1. 主从切换,自动选主
        2. 操作日志处理(journal,binlog)
    2. 多活(多副本)方案:
        1. 节点状态同步: 注册,发现,下线
    3. 资源隔离:

-------------------
*) 网格稳定性:
    1. 服务注册与发现
    2. RPC监控,链路追踪,服务调用依赖图谱
    3. 流量调度,灰度,服务升降级 

-------------------------------------------
*) 计算机网络

-------------------------------------------
应用系统:
*) JAVA系统(JVM):
*) MYSQL数据库:
*) REDIS:
*) NGINX:
*) JAVA应用系统:
*) FLEX-BSION:
